import * as mfs from 'memory-fs'
import * as webpack from 'webpack'

export default (app, config, cb) => {
  let bundle
  let clientManifest
  let template

  const ready = (...args) => {
    cb(...args)
  }

  // modify client config to work with hot middleware
  this.config.devConfig.output.filename = '[name].js'

  // dev middleware
  const compiler = webpack(this.config.devConfig)
  const devMiddleware = require('koa-webpack')({
    compiler,
    config: {
      publicPath: this.config.devConfig.output.publicPath,
      noInfo: true,
      stats: {
        colors: true,
        chunks: false
      },
      // serverSideRender: true
    }
  })
  app.use(devMiddleware)

  compiler.plugin('done', () => {
    const fs = devMiddleware.dev.fileSystem
    const readFile = (file) => fs.readFileSync(file, 'utf-8')
    clientManifest = JSON.parse(readFile(config.manifest))
    template = readFile(config.template)
    if (bundle) {
      ready(bundle, template, {
        clientManifest
      })
    }
  })

  // watch and update server renderer
  const serverCompiler = webpack(this.config.ssrConfig)
  const fs = new mfs()
  serverCompiler.outputFileSystem = fs
  serverCompiler.watch({}, (err, stats) => {
    if (err) {
      throw err
    }
    stats = stats.toJson()
    stats.errors.forEach((er) => console.error(er))
    stats.warnings.forEach((er) => console.warn(er))
    const readFile = (file) => {
      return fs.readFileSync(file, 'utf-8')
    }
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(config.bundle))
    if (clientManifest && template) {
      cb(bundle, template, { clientManifest })
    }
  })

  return devMiddleware
}
